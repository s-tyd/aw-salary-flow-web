name: Deploy to AWS App Runner

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-3
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}

jobs:
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push backend image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd backend
        
        # 本番用Dockerfileでx86_64ビルド
        docker build --platform linux/amd64 -f Dockerfile.prod -t $ECR_REGISTRY/salary-flow-backend:$IMAGE_TAG .
        docker build --platform linux/amd64 -f Dockerfile.prod -t $ECR_REGISTRY/salary-flow-backend:latest .
        docker push $ECR_REGISTRY/salary-flow-backend:$IMAGE_TAG
        docker push $ECR_REGISTRY/salary-flow-backend:latest

    - name: Deploy to App Runner
      run: |
        # App Runnerサービスが存在するかチェック
        if aws apprunner describe-service --service-arn arn:aws:apprunner:$AWS_REGION:${{ secrets.AWS_ACCOUNT_ID }}:service/salary-flow-backend 2>/dev/null; then
          echo "サービス更新中..."
          aws apprunner start-deployment --service-arn arn:aws:apprunner:$AWS_REGION:${{ secrets.AWS_ACCOUNT_ID }}:service/salary-flow-backend
        else
          echo "新規サービス作成中..."
          aws apprunner create-service \
            --service-name salary-flow-backend \
            --source-configuration '{
              "ImageRepository": {
                "ImageIdentifier": "'$ECR_REGISTRY'/salary-flow-backend:latest",
                "ImageConfiguration": {
                  "Port": "8000",
                  "RuntimeEnvironmentVariables": {
                    "DATABASE_URL": "${{ secrets.DATABASE_URL }}",
                    "SECRET_KEY": "${{ secrets.SECRET_KEY }}"
                  }
                },
                "ImageRepositoryType": "ECR"
              },
              "AutoDeploymentsEnabled": true
            }' \
            --instance-configuration '{
              "Cpu": "0.25 vCPU",
              "Memory": "0.5 GB"
            }'
        fi

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: deploy-backend
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push frontend image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd frontend
        
        # 本番用Dockerfileでx86_64ビルド
        docker build --platform linux/amd64 -f Dockerfile.prod -t $ECR_REGISTRY/salary-flow-frontend:$IMAGE_TAG .
        docker build --platform linux/amd64 -f Dockerfile.prod -t $ECR_REGISTRY/salary-flow-frontend:latest .
        docker push $ECR_REGISTRY/salary-flow-frontend:$IMAGE_TAG
        docker push $ECR_REGISTRY/salary-flow-frontend:latest

    - name: Deploy to App Runner
      run: |
        # App Runnerサービスが存在するかチェック
        if aws apprunner describe-service --service-arn arn:aws:apprunner:$AWS_REGION:${{ secrets.AWS_ACCOUNT_ID }}:service/salary-flow-frontend 2>/dev/null; then
          echo "サービス更新中..."
          aws apprunner start-deployment --service-arn arn:aws:apprunner:$AWS_REGION:${{ secrets.AWS_ACCOUNT_ID }}:service/salary-flow-frontend
        else
          echo "新規サービス作成中..."
          aws apprunner create-service \
            --service-name salary-flow-frontend \
            --source-configuration '{
              "ImageRepository": {
                "ImageIdentifier": "'$ECR_REGISTRY'/salary-flow-frontend:latest",
                "ImageConfiguration": {
                  "Port": "3000",
                  "RuntimeEnvironmentVariables": {
                    "NEXT_PUBLIC_API_URL": "${{ secrets.BACKEND_URL }}"
                  }
                },
                "ImageRepositoryType": "ECR"
              },
              "AutoDeploymentsEnabled": true
            }' \
            --instance-configuration '{
              "Cpu": "0.25 vCPU",
              "Memory": "0.5 GB"
            }'
        fi